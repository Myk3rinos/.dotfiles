# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

# [[plugin.prepend_previewers]]
# mime = "audio/*"

[mgr]
# ratio          = [ 1, 4, 3 ]
# sort_by        = "alphabetical"
# sort_sensitive = false
# sort_reverse   = false
# sort_dir_first = false
# linemode       = "none"
linemode       = "size"
show_hidden    = true
show_symlink   = true
# scrolloff      = 5

# [preview]
# tab_size        = 2
# max_width       = 600
# max_height      = 900
# cache_dir       = ""
# image_filter    = "triangle"
# image_quality   = 75
# sixel_fraction  = 15
# ueberzug_scale  = 1
# ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = 'nvim "$@"', desc = "nvim", block = true, for = "unix" },
	{ run = 'windsurf "$@"', desc = "windsurf", block = true, for = "unix" },
# 	{ run = '${EDITOR:=nvim} "$@"', desc = "$EDITOR", block = true, for = "unix" },
# 	{ run = 'kitty --config /home/will/.config/kitty/kitty_n.conf ${EDITOR:=vi} "$@"', desc = 'new window ${EDITOR}', block = true, for = "unix" },
# 	{ run = 'code "%*"',          orphan = true, for = "windows" },
# 	{ run = 'bash "$@"', desc = "Execute", for = "unix" },
]
open = [
	{ run = 'xdg-open "$@"',                desc = "Open", for = "linux" },
	{ run = 'nautilus "$@"',                desc = "Open Nautilus", for = "linux" },
	# copie path
	{ run = 'echo -n "$@" | xclip -selection clipboard', desc = "Copy path", for = "unix" },

# 	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
# 	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
  
	# { run = 'gsettings set org.gnome.desktop.background picture-uri-dark file://"$@"', orphan = true, desc = "Set as wallpaper", for = "linux" },
#   { run = 'bash "$@"', desc = "Execute", for = "unix" },
]
reveal = [
# 	{ run = 'open -R "$1"',                          desc = "Reveal", for = "macos" },
# 	{ run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'unar "$1"', block = true, desc = "Extract here", for = "unix" },
# 	{ run = 'unar "%1"', desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'rhythmbox "$@"', orphan = true, desc = "Play", for = "unix" },
# 	{ run = 'clapper "$@"', orphan = true, for = "unix", desc = "clapper" },
#   { run = 'sushi "${@// /_}"', block = true, for = "unix", desc = "sushi"},
# 	{ run = 'mpv "%1"', orphan = true, for = "windows" },
# 	{ run = 'stat "$@"', block = true, desc = "Show media info", for = "unix" },
]
wallpaper = [
	{ run = 'gsettings set org.gnome.desktop.background picture-uri-dark file://"$@"', orphan = true, desc = "Set as wallpaper", for = "linux" },
]



[open]
rules = [
	# # Tous les fichiers
    # { name = "*", use = ["open", "reveal"] },
    # # Fichiers audio spécifiques
    # { name = "*.mp3", use = ["open", "play"] },
    # { name = "*.flac", use = ["open", "play"] },
    # { name = "*.wav", use = ["open", "play"] },
    # { name = "*.ogg", use = ["open", "play"] },
    
    # # Images
    { name = "*.{png,jpg,jpeg,gif,bmp,heic}", use = ["open", "reveal", "wallpaper"] },
    
    # # Videos
    # { name = "*.{mp4,avi,mkv,webm}", use = ["open", "play"] },

    # # PDF
    # { name = "*.pdf", use = ["open", "reveal"] },

	# Programmes
	{ name = "*.{sh,md,zsh,c,cpp,cs,css,elm,erl,fish,go,h,hpp,html,java,js,json,kt,less,php,pl,py,rb,rs,scala,sql,swift,ts,xml,yml,yaml,ini,conf,txt,md,zshrc,toml,lua,tmTheme,theme,json}", use = ["edit", "open", "reveal"] },
	
	# Archives
	{ name = "*.{zip,tar,7z,iso}", use = ["open", "reveal", "extract"] },

	# Autres
    { name = "*", use = ["open", "reveal"] },

	# Dossier
    { name = "*/", use = ["open", "reveal"] },
    # Autres règles...
]
# [open]
# rules = [
# 	{ name = "*/", use = [ "edit", "open", "reveal" ] },

# 	{ mime = "text/*",  use = [ "edit", "reveal" ] },
	# { mime = "image/*", use = [ "open", "reveal" ] },
# 	{ mime = "video/*", use = [ "play", "reveal" ] },
# 	{ mime = "audio/*", use = [ "play", "reveal" ] },
# 	{ mime = "inode/x-empty", use = [ "edit", "reveal" ] },

# 	{ mime = "application/json", use = [ "edit", "reveal" ] },
# 	{ mime = "*/javascript",     use = [ "edit", "reveal" ] },

# 	{ mime = "application/zip",             use = [ "extract", "reveal" ] },
# 	{ mime = "application/gzip",            use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-tar",           use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-bzip",          use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-bzip2",         use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
# 	{ mime = "application/x-rar",           use = [ "extract", "reveal" ] },
# 	{ mime = "application/xz",              use = [ "extract", "reveal" ] },

# 	# { mime = "*", use = [ "open", "reveal" ] },
	
#   # { mime = "*.sh", use = [ "open", "reveal" ] },
#   { name = "*.jpg", use = [ "open", "setwall" ] },
#   { name = "*.xz", use = [ "open", "extract" ] },
# ]

# [tasks]
# micro_workers    = 10
# macro_workers    = 25
# bizarre_retry    = 5
# image_alloc      = 536870912  # 512MB
# image_bound      = [ 0, 0 ]
# suppress_preload = false

# [plugin]
# preload = [
#     "~/.config/yazi/plugins/max-preview.lua"
# ]
# prepend_previewers = [
#   { mime = "*.md", run = "glow" },
#   { name = "*.mp3", run = "exifaudio" },
#   { mime = "audio/*", run = "exifaudio" },
#   { mime = "Musique/*", run = "exifaudio" },
# ]
  
# preloaders = [
# 	{ name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# ]
# previewers = [
# 	{ name = "*/", run = "folder", sync = true },
# 	# Code
# 	{ mime = "text/*",                 run = "code" },
# 	{ mime = "*/xml",                  run = "code" },
# 	{ mime = "*/javascript",           run = "nvim" },
# 	{ mime = "*/x-wine-extension-ini", run = "code" },
# 	# JSON
# 	{ mime = "application/json", run = "json" },
# 	# Image
# 	{ mime = "image/vnd.djvu", run = "noop" },
# 	{ mime = "image/*",        run = "image" },
# 	# Video
# 	{ mime = "video/*", run = "video" },
# 	# PDF
# 	{ mime = "application/pdf", run = "pdf" },
# 	# Archive
# 	{ mime = "application/zip",             run = "archive" },
# 	{ mime = "application/gzip",            run = "archive" },
# 	{ mime = "application/x-tar",           run = "archive" },
# 	{ mime = "application/x-bzip",          run = "archive" },
# 	{ mime = "application/x-bzip2",         run = "archive" },
# 	{ mime = "application/x-7z-compressed", run = "archive" },
# 	{ mime = "application/x-rar",           run = "archive" },
# 	{ mime = "application/xz",              run = "archive" },
# 	# Fallback
# 	{ name = "*", run = "file" },
# ]

# # [plugins]
# # preload = [
# #     "~/.config/yazi/ui.lua"
# # ]
  
# [input]
# # cd
# cd_title  = "Change directory:"
# cd_origin = "top-center"
# cd_offset = [ 0, 2, 50, 3 ]

# # create
# create_title  = " Create: "
# create_origin = "top-left"
# create_offset = [ 50, 20, 100, 300 ]

# # rename
# rename_title  = "Rename:"
# rename_origin = "hovered"
# rename_offset = [ 0, 1, 50, 3 ]

# # trash
# trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
# trash_origin	= "top-center"
# trash_offset	= [ 0, 2, 50, 3 ]

# # delete
# delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
# delete_origin	= "top-center"
# delete_offset	= [ 0, 2, 50, 3 ]

# # filter
# filter_title  = " Filter: "
# filter_origin = "top-center"
# filter_offset = [ 0, 2, 50, 3 ]

# # find
# find_title  = [ " Find next: ", " Find previous: " ]
# find_origin = "top-center"
# find_offset = [ 0, 2, 50, 3 ]

# # search
# search_title  = "Search via {n}:"
# search_origin = "top-center"
# search_offset = [ 0, 2, 50, 3 ]

# # shell
# shell_title  = [ " Shell: ", " Shell (block): " ]
# shell_origin = "top-center"
# shell_offset = [ 0, 2, 50, 3 ]

# # overwrite
# overwrite_title  = "Overwrite an existing file? (y/N)"
# overwrite_origin = "top-center"
# overwrite_offset = [ 0, 2, 50, 3 ]

# # quit
# quit_title  = "{n} task{s} running, sure to quit? (y/N)"
# quit_origin = "top-center"
# quit_offset = [ 0, 2, 50, 3 ]

# [select]
# open_title  = "Open with:"
# open_origin = "hovered"
# open_offset = [ 0, 1, 50, 7 ]

# [which]
# sort_by        = "none"
# sort_sensitive = false
# sort_reverse   = false

# [log]
# enabled = false
